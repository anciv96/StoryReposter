from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, or_f, and_f
from aiogram.fsm.context import FSMContext

from app import logger_setup
from app.telegram_bot.filters.admin_filter import IsAdminFilter
from app.telegram_bot.keyboards.default.menu_keyboard import menu_kb
from app.telegram_bot.states.add_usernames_list_state import AddUsernamesState
from app.utils.folder_utils import download_file, clear_directory
from config.config import USERNAMES_LIST_DIR

add_usernames_router = Router(name=__name__)
logger = logger_setup.get_logger(__name__)


@add_usernames_router.message(and_f(
    or_f(
        Command('add_usernames'),
        F.text == 'üìù –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫'),
    IsAdminFilter(True)
))
async def prompt_for_usernames_file(message: Message, state: FSMContext):
    """
    Handles the /add_usernames command by prompting the user to upload a .txt file containing
    usernames in the format @username on each new line.
    """
    await message.reply(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–≥–≥–∏–Ω–≥–∞. "
        "–í —Ñ–æ—Ä–º–∞—Ç–µ @username –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ."
    )
    await state.set_state(AddUsernamesState.file)


@add_usernames_router.message(AddUsernamesState.file)
async def handle_usernames_file(message: Message, state: FSMContext):
    """
    Processes the uploaded .txt file, verifies its format, and parses usernames if valid.
    """
    await state.clear()
    if message.document is None:
        await message.answer('–û—à–∏–±–∫–∞: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª.', reply_markup=menu_kb)
        return

    if not message.document.file_name.endswith('.txt'):
        await message.reply("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt.", reply_markup=menu_kb)
        return

    try:
        await clear_directory(USERNAMES_LIST_DIR)
        file_path = await download_file(message, USERNAMES_LIST_DIR)
        usernames_count = await process_usernames_file(file_path)

        if usernames_count > 0:
            await message.reply(f"–°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ {usernames_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–≥–≥–∏–Ω–≥–∞.",
                                reply_markup=menu_kb)
        else:
            await message.reply(
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ @username –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.",
                reply_markup=menu_kb)
    except FileNotFoundError:
        logger.error("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
        await message.reply("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def process_usernames_file(file_path: str) -> int:
    """
    Reads a .txt file, filters for valid usernames (lines starting with @),
    and returns the count of valid usernames found.

    Args:
        file_path (str): Path to the uploaded .txt file.

    Returns:
        int: Number of valid usernames found in the file.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            usernames = [line.strip() for line in file if line.startswith('@') and len(line.strip()) > 1]
        return len(usernames)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return 0
    except UnicodeDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.")
        return 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return 0
